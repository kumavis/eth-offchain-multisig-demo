(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/worker-loader/dist/cjs.js!./www/worker.js":
/*!****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js!./www/worker.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Worker_fn; });\nfunction Worker_fn() {\n  return new Worker(__webpack_require__.p + \"bootstrap.worker.js\");\n}\n\n\n//# sourceURL=webpack:///./www/worker.js?./node_modules/worker-loader/dist/cjs.js");

/***/ }),

/***/ "./www/index.js":
/*!**********************!*\
  !*** ./www/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var worker_loader_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader!./worker.js */ \"./node_modules/worker-loader/dist/cjs.js!./www/worker.js\");\n\n\nconst genKeyButton = document.getElementById('keygen'),\n  verifySignatureButton = document.getElementById('verify'),\n  thresholdInput = document.getElementById('threshold'),\n  partiesInput = document.getElementById('parties'),\n  partiesList = document.getElementById('parties-list'),\n  payload = document.getElementById('payload'),\n  progress = document.getElementById('progress'),\n  label = document.getElementById('label'),\n  data = document.getElementById('data'),\n  json = document.getElementById('json'),\n  params = document.getElementById('params'),\n  intro = document.getElementById('intro');\n\n// Message must be Vec<u8>, do not use Uint8Array as that\n// gets serialized to a JSON object.\nconst message = randomMessage();\n\nlet threshold = 1;\nlet parties = 3;\nlet signingIndices = [];\n\npayload.innerText = hex(message);\nthresholdInput.value = threshold;\npartiesInput.value = parties;\n\nconst show = (el) => el.style.display = 'flex';\nconst hide = (el) => el.style.display = 'none';\n\nfunction randomMessage() {\n  return (Array.apply(null, Array(32))).map(() => {\n    return Math.floor(Math.random() * 256);\n  });\n}\n\nthresholdInput.addEventListener('change', (e) => {\n  threshold = Math.min(parseInt(e.target.value), parties - 1);\n});\n\npartiesInput.addEventListener('change', (e) => {\n  parties = parseInt(e.target.value);\n  thresholdInput.setAttribute('max', parties - 1);\n  if (threshold >= parties)  {\n    threshold = parties - 1;\n    thresholdInput.value = threshold;\n  }\n});\n\nfunction hex(bytes) {\n  const chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  return bytes.reduce((acc, u8) => {\n    acc += chars[Math.floor(u8 / 16)] + chars[u8 % 16];\n    return acc\n  }, '');\n}\n\nif (window.Worker) {\n  const worker = new worker_loader_worker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('worker.js');\n\n  function showPartyKeys(multiKey) {\n    show(partiesList);\n    const keys = multiKey[0];\n    const sharedKeys = multiKey[1];\n    const ge = multiKey[2];\n    const partyKeys = [];\n\n    const tpl = document.getElementById('party-item');\n\n    for (let i = 0; i < parties;i++) {\n      const template = tpl.content.cloneNode(true);\n      const heading = template.querySelector('h3');\n      const button = template.querySelector('button');\n      heading.innerText = `Party ${i + 1}`;\n\n      const partyKeyData = {\n        index: i,\n        key: multiKey[0][i],\n        sharedKey: multiKey[1][i],\n        vssScheme: multiKey[4]\n      };\n\n      const pre = template.querySelector('details > pre');\n      pre.innerText = JSON.stringify(partyKeyData, undefined, 2);\n\n      button.addEventListener('click', (e) => {\n        e.currentTarget.setAttribute('disabled', '1');\n        signingIndices.push(i);\n        if (signingIndices.length === threshold + 1) {\n          const signData = { threshold, parties, message, signingIndices, signKeys: multiKey };\n          worker.postMessage({type: 'sign_message', ...signData})\n          hide(partiesList);\n          label.innerText = \"Signing message...\";\n          show(progress);\n        }\n      });\n      partiesList.appendChild(template);\n    }\n  }\n\n  worker.onmessage = (e) => {\n    if (e.data.type === 'ready') {\n      show(genKeyButton);\n      genKeyButton.addEventListener('click', (_) => {\n        show(progress);\n        thresholdInput.setAttribute('disabled', '1');\n        partiesInput.setAttribute('disabled', '1');\n        worker.postMessage({type: 'keygen', threshold, parties})\n      });\n      verifySignatureButton.addEventListener('click', (_) => {\n          hide(progress);\n          hide(verifySignatureButton);\n          hide(data);\n          worker.postMessage({type: 'verify_signature', threshold, parties})\n      });\n\n    } else if (e.data.type === 'keygen_done') {\n      hide(progress);\n      hide(genKeyButton);\n      showPartyKeys(e.data.keys);\n    } else if (e.data.type === 'sign_message_done') {\n      hide(progress);\n      show(verifySignatureButton);\n      show(data);\n      data.querySelector('summary').innerText = \"Signed data\";\n      json.innerText = JSON.stringify(e.data.signed, undefined, 2);\n    } else if (e.data.type === 'verify_signature_done') {\n      hide(params);\n      intro.innerText = \"Signing verification completed!\";\n    }\n  }\n} else {\n  console.log('Your browser doesn\\'t support web workers.');\n}\n\n\n//# sourceURL=webpack:///./www/index.js?");

/***/ })

}]);